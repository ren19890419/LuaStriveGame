//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MovingJoystickWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MovingJoystick), typeof(System.Object));
		L.RegFunction("Axis2Angle", Axis2Angle);
		L.RegFunction("New", _CreateMovingJoystick);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("joystickName", get_joystickName, set_joystickName);
		L.RegVar("joystickAxis", get_joystickAxis, set_joystickAxis);
		L.RegVar("joystickValue", get_joystickValue, set_joystickValue);
		L.RegVar("joystick", get_joystick, set_joystick);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMovingJoystick(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				MovingJoystick obj = new MovingJoystick();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MovingJoystick.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Axis2Angle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				MovingJoystick obj = (MovingJoystick)ToLua.CheckObject<MovingJoystick>(L, 1);
				float o = obj.Axis2Angle();
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2)
			{
				MovingJoystick obj = (MovingJoystick)ToLua.CheckObject<MovingJoystick>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				float o = obj.Axis2Angle(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MovingJoystick.Axis2Angle");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_joystickName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovingJoystick obj = (MovingJoystick)o;
			string ret = obj.joystickName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index joystickName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_joystickAxis(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovingJoystick obj = (MovingJoystick)o;
			UnityEngine.Vector2 ret = obj.joystickAxis;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index joystickAxis on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_joystickValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovingJoystick obj = (MovingJoystick)o;
			UnityEngine.Vector2 ret = obj.joystickValue;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index joystickValue on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_joystick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovingJoystick obj = (MovingJoystick)o;
			EasyJoystick ret = obj.joystick;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index joystick on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_joystickName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovingJoystick obj = (MovingJoystick)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.joystickName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index joystickName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_joystickAxis(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovingJoystick obj = (MovingJoystick)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.joystickAxis = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index joystickAxis on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_joystickValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovingJoystick obj = (MovingJoystick)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.joystickValue = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index joystickValue on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_joystick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MovingJoystick obj = (MovingJoystick)o;
			EasyJoystick arg0 = (EasyJoystick)ToLua.CheckObject<EasyJoystick>(L, 2);
			obj.joystick = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index joystick on a nil value");
		}
	}
}

