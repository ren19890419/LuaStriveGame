//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class EasyJoystickWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(EasyJoystick), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("enable", get_enable, set_enable);
		L.RegVar("isActivated", get_isActivated, set_isActivated);
		L.RegVar("showDebugRadius", get_showDebugRadius, set_showDebugRadius);
		L.RegVar("useFixedUpdate", get_useFixedUpdate, set_useFixedUpdate);
		L.RegVar("isUseGuiLayout", get_isUseGuiLayout, set_isUseGuiLayout);
		L.RegVar("area", get_area, set_area);
		L.RegVar("deadZone", get_deadZone, set_deadZone);
		L.RegVar("resetFingerExit", get_resetFingerExit, set_resetFingerExit);
		L.RegVar("useBroadcast", get_useBroadcast, set_useBroadcast);
		L.RegVar("messageMode", get_messageMode, set_messageMode);
		L.RegVar("receiverGameObject", get_receiverGameObject, set_receiverGameObject);
		L.RegVar("speed", get_speed, set_speed);
		L.RegVar("enableXaxis", get_enableXaxis, set_enableXaxis);
		L.RegVar("xAxisCharacterController", get_xAxisCharacterController, set_xAxisCharacterController);
		L.RegVar("xAxisGravity", get_xAxisGravity, set_xAxisGravity);
		L.RegVar("xAI", get_xAI, set_xAI);
		L.RegVar("inverseXAxis", get_inverseXAxis, set_inverseXAxis);
		L.RegVar("enableXClamp", get_enableXClamp, set_enableXClamp);
		L.RegVar("clampXMax", get_clampXMax, set_clampXMax);
		L.RegVar("clampXMin", get_clampXMin, set_clampXMin);
		L.RegVar("enableXAutoStab", get_enableXAutoStab, set_enableXAutoStab);
		L.RegVar("enableYaxis", get_enableYaxis, set_enableYaxis);
		L.RegVar("yAxisCharacterController", get_yAxisCharacterController, set_yAxisCharacterController);
		L.RegVar("yAxisGravity", get_yAxisGravity, set_yAxisGravity);
		L.RegVar("yAI", get_yAI, set_yAI);
		L.RegVar("inverseYAxis", get_inverseYAxis, set_inverseYAxis);
		L.RegVar("enableYClamp", get_enableYClamp, set_enableYClamp);
		L.RegVar("clampYMax", get_clampYMax, set_clampYMax);
		L.RegVar("clampYMin", get_clampYMin, set_clampYMin);
		L.RegVar("enableYAutoStab", get_enableYAutoStab, set_enableYAutoStab);
		L.RegVar("enableSmoothing", get_enableSmoothing, set_enableSmoothing);
		L.RegVar("smoothing", get_smoothing, set_smoothing);
		L.RegVar("enableInertia", get_enableInertia, set_enableInertia);
		L.RegVar("inertia", get_inertia, set_inertia);
		L.RegVar("guiDepth", get_guiDepth, set_guiDepth);
		L.RegVar("showZone", get_showZone, set_showZone);
		L.RegVar("showTouch", get_showTouch, set_showTouch);
		L.RegVar("showDeadZone", get_showDeadZone, set_showDeadZone);
		L.RegVar("areaTexture", get_areaTexture, set_areaTexture);
		L.RegVar("areaColor", get_areaColor, set_areaColor);
		L.RegVar("touchTexture", get_touchTexture, set_touchTexture);
		L.RegVar("touchColor", get_touchColor, set_touchColor);
		L.RegVar("deadTexture", get_deadTexture, set_deadTexture);
		L.RegVar("showProperties", get_showProperties, set_showProperties);
		L.RegVar("showInteraction", get_showInteraction, set_showInteraction);
		L.RegVar("showAppearance", get_showAppearance, set_showAppearance);
		L.RegVar("showPosition", get_showPosition, set_showPosition);
		L.RegVar("JoystickAxis", get_JoystickAxis, null);
		L.RegVar("JoystickTouch", get_JoystickTouch, set_JoystickTouch);
		L.RegVar("JoystickValue", get_JoystickValue, null);
		L.RegVar("DynamicJoystick", get_DynamicJoystick, set_DynamicJoystick);
		L.RegVar("JoyAnchor", get_JoyAnchor, set_JoyAnchor);
		L.RegVar("JoystickPositionOffset", get_JoystickPositionOffset, set_JoystickPositionOffset);
		L.RegVar("ZoneRadius", get_ZoneRadius, set_ZoneRadius);
		L.RegVar("TouchSize", get_TouchSize, set_TouchSize);
		L.RegVar("RestrictArea", get_RestrictArea, set_RestrictArea);
		L.RegVar("Interaction", get_Interaction, set_Interaction);
		L.RegVar("XAxisTransform", get_XAxisTransform, set_XAxisTransform);
		L.RegVar("XTI", get_XTI, set_XTI);
		L.RegVar("ThresholdX", get_ThresholdX, set_ThresholdX);
		L.RegVar("StabSpeedX", get_StabSpeedX, set_StabSpeedX);
		L.RegVar("YAxisTransform", get_YAxisTransform, set_YAxisTransform);
		L.RegVar("YTI", get_YTI, set_YTI);
		L.RegVar("ThresholdY", get_ThresholdY, set_ThresholdY);
		L.RegVar("StabSpeedY", get_StabSpeedY, set_StabSpeedY);
		L.RegVar("Smoothing", get_Smoothing, set_Smoothing);
		L.RegVar("Inertia", get_Inertia, set_Inertia);
		L.RegVar("On_JoystickMoveStart", get_On_JoystickMoveStart, set_On_JoystickMoveStart);
		L.RegVar("On_JoystickMove", get_On_JoystickMove, set_On_JoystickMove);
		L.RegVar("On_JoystickMoveEnd", get_On_JoystickMoveEnd, set_On_JoystickMoveEnd);
		L.RegVar("On_JoystickTouchStart", get_On_JoystickTouchStart, set_On_JoystickTouchStart);
		L.RegVar("On_JoystickTap", get_On_JoystickTap, set_On_JoystickTap);
		L.RegVar("On_JoystickDoubleTap", get_On_JoystickDoubleTap, set_On_JoystickDoubleTap);
		L.RegVar("On_JoystickTouchUp", get_On_JoystickTouchUp, set_On_JoystickTouchUp);
		L.RegFunction("JoystickTouchUpHandler", EasyJoystick_JoystickTouchUpHandler);
		L.RegFunction("JoystickDoubleTapHandler", EasyJoystick_JoystickDoubleTapHandler);
		L.RegFunction("JoystickTapHandler", EasyJoystick_JoystickTapHandler);
		L.RegFunction("JoystickTouchStartHandler", EasyJoystick_JoystickTouchStartHandler);
		L.RegFunction("JoystickMoveEndHandler", EasyJoystick_JoystickMoveEndHandler);
		L.RegFunction("JoystickMoveHandler", EasyJoystick_JoystickMoveHandler);
		L.RegFunction("JoystickMoveStartHandler", EasyJoystick_JoystickMoveStartHandler);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.enable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isActivated(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.isActivated;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isActivated on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showDebugRadius(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.showDebugRadius;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showDebugRadius on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useFixedUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.useFixedUpdate;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useFixedUpdate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isUseGuiLayout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.isUseGuiLayout;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isUseGuiLayout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_area(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			EasyJoystick.DynamicArea ret = obj.area;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index area on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_deadZone(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float ret = obj.deadZone;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index deadZone on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_resetFingerExit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.resetFingerExit;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index resetFingerExit on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useBroadcast(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.useBroadcast;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useBroadcast on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_messageMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			EasyJoystick.Broadcast ret = obj.messageMode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index messageMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_receiverGameObject(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.GameObject ret = obj.receiverGameObject;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index receiverGameObject on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_speed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Vector2 ret = obj.speed;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index speed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enableXaxis(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.enableXaxis;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enableXaxis on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_xAxisCharacterController(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.CharacterController ret = obj.xAxisCharacterController;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index xAxisCharacterController on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_xAxisGravity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float ret = obj.xAxisGravity;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index xAxisGravity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_xAI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			EasyJoystick.AxisInfluenced ret = obj.xAI;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index xAI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_inverseXAxis(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.inverseXAxis;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inverseXAxis on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enableXClamp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.enableXClamp;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enableXClamp on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_clampXMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float ret = obj.clampXMax;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index clampXMax on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_clampXMin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float ret = obj.clampXMin;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index clampXMin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enableXAutoStab(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.enableXAutoStab;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enableXAutoStab on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enableYaxis(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.enableYaxis;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enableYaxis on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_yAxisCharacterController(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.CharacterController ret = obj.yAxisCharacterController;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index yAxisCharacterController on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_yAxisGravity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float ret = obj.yAxisGravity;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index yAxisGravity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_yAI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			EasyJoystick.AxisInfluenced ret = obj.yAI;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index yAI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_inverseYAxis(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.inverseYAxis;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inverseYAxis on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enableYClamp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.enableYClamp;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enableYClamp on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_clampYMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float ret = obj.clampYMax;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index clampYMax on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_clampYMin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float ret = obj.clampYMin;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index clampYMin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enableYAutoStab(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.enableYAutoStab;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enableYAutoStab on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enableSmoothing(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.enableSmoothing;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enableSmoothing on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_smoothing(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Vector2 ret = obj.smoothing;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index smoothing on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enableInertia(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.enableInertia;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enableInertia on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_inertia(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Vector2 ret = obj.inertia;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inertia on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_guiDepth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			int ret = obj.guiDepth;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index guiDepth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showZone(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.showZone;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showZone on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showTouch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.showTouch;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showTouch on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showDeadZone(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.showDeadZone;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showDeadZone on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_areaTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Texture ret = obj.areaTexture;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index areaTexture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_areaColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Color ret = obj.areaColor;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index areaColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_touchTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Texture ret = obj.touchTexture;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index touchTexture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_touchColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Color ret = obj.touchColor;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index touchColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_deadTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Texture ret = obj.deadTexture;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index deadTexture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showProperties(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.showProperties;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showProperties on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showInteraction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.showInteraction;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showInteraction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showAppearance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.showAppearance;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showAppearance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.showPosition;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showPosition on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_JoystickAxis(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Vector2 ret = obj.JoystickAxis;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index JoystickAxis on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_JoystickTouch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Vector2 ret = obj.JoystickTouch;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index JoystickTouch on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_JoystickValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Vector2 ret = obj.JoystickValue;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index JoystickValue on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DynamicJoystick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.DynamicJoystick;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DynamicJoystick on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_JoyAnchor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			EasyJoystick.JoystickAnchor ret = obj.JoyAnchor;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index JoyAnchor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_JoystickPositionOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Vector2 ret = obj.JoystickPositionOffset;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index JoystickPositionOffset on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ZoneRadius(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float ret = obj.ZoneRadius;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ZoneRadius on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TouchSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float ret = obj.TouchSize;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TouchSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RestrictArea(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool ret = obj.RestrictArea;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RestrictArea on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Interaction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			EasyJoystick.InteractionType ret = obj.Interaction;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Interaction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_XAxisTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Transform ret = obj.XAxisTransform;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index XAxisTransform on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_XTI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			EasyJoystick.PropertiesInfluenced ret = obj.XTI;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index XTI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ThresholdX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float ret = obj.ThresholdX;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ThresholdX on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StabSpeedX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float ret = obj.StabSpeedX;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StabSpeedX on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_YAxisTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Transform ret = obj.YAxisTransform;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index YAxisTransform on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_YTI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			EasyJoystick.PropertiesInfluenced ret = obj.YTI;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index YTI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ThresholdY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float ret = obj.ThresholdY;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ThresholdY on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StabSpeedY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float ret = obj.StabSpeedY;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StabSpeedY on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Smoothing(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Vector2 ret = obj.Smoothing;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Smoothing on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Inertia(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Vector2 ret = obj.Inertia;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Inertia on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_On_JoystickMoveStart(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(EasyJoystick.JoystickMoveStartHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_On_JoystickMove(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(EasyJoystick.JoystickMoveHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_On_JoystickMoveEnd(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(EasyJoystick.JoystickMoveEndHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_On_JoystickTouchStart(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(EasyJoystick.JoystickTouchStartHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_On_JoystickTap(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(EasyJoystick.JoystickTapHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_On_JoystickDoubleTap(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(EasyJoystick.JoystickDoubleTapHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_On_JoystickTouchUp(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(EasyJoystick.JoystickTouchUpHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.enable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isActivated(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isActivated = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isActivated on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showDebugRadius(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showDebugRadius = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showDebugRadius on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useFixedUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useFixedUpdate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useFixedUpdate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isUseGuiLayout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isUseGuiLayout = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isUseGuiLayout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_area(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			EasyJoystick.DynamicArea arg0 = (EasyJoystick.DynamicArea)ToLua.CheckObject(L, 2, typeof(EasyJoystick.DynamicArea));
			obj.area = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index area on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_deadZone(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.deadZone = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index deadZone on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_resetFingerExit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.resetFingerExit = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index resetFingerExit on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useBroadcast(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useBroadcast = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useBroadcast on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_messageMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			EasyJoystick.Broadcast arg0 = (EasyJoystick.Broadcast)ToLua.CheckObject(L, 2, typeof(EasyJoystick.Broadcast));
			obj.messageMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index messageMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_receiverGameObject(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.receiverGameObject = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index receiverGameObject on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_speed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.speed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index speed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enableXaxis(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.enableXaxis = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enableXaxis on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_xAxisCharacterController(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.CharacterController arg0 = (UnityEngine.CharacterController)ToLua.CheckObject(L, 2, typeof(UnityEngine.CharacterController));
			obj.xAxisCharacterController = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index xAxisCharacterController on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_xAxisGravity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.xAxisGravity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index xAxisGravity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_xAI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			EasyJoystick.AxisInfluenced arg0 = (EasyJoystick.AxisInfluenced)ToLua.CheckObject(L, 2, typeof(EasyJoystick.AxisInfluenced));
			obj.xAI = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index xAI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_inverseXAxis(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.inverseXAxis = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inverseXAxis on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enableXClamp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.enableXClamp = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enableXClamp on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_clampXMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.clampXMax = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index clampXMax on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_clampXMin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.clampXMin = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index clampXMin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enableXAutoStab(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.enableXAutoStab = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enableXAutoStab on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enableYaxis(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.enableYaxis = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enableYaxis on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_yAxisCharacterController(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.CharacterController arg0 = (UnityEngine.CharacterController)ToLua.CheckObject(L, 2, typeof(UnityEngine.CharacterController));
			obj.yAxisCharacterController = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index yAxisCharacterController on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_yAxisGravity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.yAxisGravity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index yAxisGravity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_yAI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			EasyJoystick.AxisInfluenced arg0 = (EasyJoystick.AxisInfluenced)ToLua.CheckObject(L, 2, typeof(EasyJoystick.AxisInfluenced));
			obj.yAI = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index yAI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_inverseYAxis(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.inverseYAxis = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inverseYAxis on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enableYClamp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.enableYClamp = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enableYClamp on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_clampYMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.clampYMax = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index clampYMax on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_clampYMin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.clampYMin = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index clampYMin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enableYAutoStab(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.enableYAutoStab = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enableYAutoStab on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enableSmoothing(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.enableSmoothing = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enableSmoothing on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_smoothing(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.smoothing = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index smoothing on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enableInertia(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.enableInertia = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enableInertia on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_inertia(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.inertia = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inertia on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_guiDepth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.guiDepth = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index guiDepth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showZone(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showZone = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showZone on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showTouch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showTouch = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showTouch on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showDeadZone(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showDeadZone = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showDeadZone on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_areaTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Texture arg0 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
			obj.areaTexture = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index areaTexture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_areaColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.areaColor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index areaColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_touchTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Texture arg0 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
			obj.touchTexture = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index touchTexture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_touchColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.touchColor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index touchColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_deadTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Texture arg0 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
			obj.deadTexture = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index deadTexture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showProperties(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showProperties = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showProperties on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showInteraction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showInteraction = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showInteraction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showAppearance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showAppearance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showAppearance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showPosition = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showPosition on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_JoystickTouch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.JoystickTouch = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index JoystickTouch on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DynamicJoystick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.DynamicJoystick = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DynamicJoystick on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_JoyAnchor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			EasyJoystick.JoystickAnchor arg0 = (EasyJoystick.JoystickAnchor)ToLua.CheckObject(L, 2, typeof(EasyJoystick.JoystickAnchor));
			obj.JoyAnchor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index JoyAnchor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_JoystickPositionOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.JoystickPositionOffset = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index JoystickPositionOffset on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ZoneRadius(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.ZoneRadius = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ZoneRadius on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TouchSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.TouchSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TouchSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RestrictArea(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.RestrictArea = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RestrictArea on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Interaction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			EasyJoystick.InteractionType arg0 = (EasyJoystick.InteractionType)ToLua.CheckObject(L, 2, typeof(EasyJoystick.InteractionType));
			obj.Interaction = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Interaction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_XAxisTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			obj.XAxisTransform = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index XAxisTransform on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_XTI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			EasyJoystick.PropertiesInfluenced arg0 = (EasyJoystick.PropertiesInfluenced)ToLua.CheckObject(L, 2, typeof(EasyJoystick.PropertiesInfluenced));
			obj.XTI = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index XTI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ThresholdX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.ThresholdX = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ThresholdX on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StabSpeedX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.StabSpeedX = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StabSpeedX on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_YAxisTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			obj.YAxisTransform = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index YAxisTransform on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_YTI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			EasyJoystick.PropertiesInfluenced arg0 = (EasyJoystick.PropertiesInfluenced)ToLua.CheckObject(L, 2, typeof(EasyJoystick.PropertiesInfluenced));
			obj.YTI = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index YTI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ThresholdY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.ThresholdY = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ThresholdY on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StabSpeedY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.StabSpeedY = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StabSpeedY on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Smoothing(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.Smoothing = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Smoothing on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Inertia(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			EasyJoystick obj = (EasyJoystick)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.Inertia = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Inertia on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_On_JoystickMoveStart(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EasyJoystick.On_JoystickMoveStart' can only appear on the left hand side of += or -= when used outside of the type 'EasyJoystick'");
			}

			if (arg0.op == EventOp.Add)
			{
				EasyJoystick.JoystickMoveStartHandler ev = (EasyJoystick.JoystickMoveStartHandler)arg0.func;
				EasyJoystick.On_JoystickMoveStart += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				EasyJoystick.JoystickMoveStartHandler ev = (EasyJoystick.JoystickMoveStartHandler)arg0.func;
				EasyJoystick.On_JoystickMoveStart -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_On_JoystickMove(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EasyJoystick.On_JoystickMove' can only appear on the left hand side of += or -= when used outside of the type 'EasyJoystick'");
			}

			if (arg0.op == EventOp.Add)
			{
				EasyJoystick.JoystickMoveHandler ev = (EasyJoystick.JoystickMoveHandler)arg0.func;
				EasyJoystick.On_JoystickMove += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				EasyJoystick.JoystickMoveHandler ev = (EasyJoystick.JoystickMoveHandler)arg0.func;
				EasyJoystick.On_JoystickMove -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_On_JoystickMoveEnd(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EasyJoystick.On_JoystickMoveEnd' can only appear on the left hand side of += or -= when used outside of the type 'EasyJoystick'");
			}

			if (arg0.op == EventOp.Add)
			{
				EasyJoystick.JoystickMoveEndHandler ev = (EasyJoystick.JoystickMoveEndHandler)arg0.func;
				EasyJoystick.On_JoystickMoveEnd += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				EasyJoystick.JoystickMoveEndHandler ev = (EasyJoystick.JoystickMoveEndHandler)arg0.func;
				EasyJoystick.On_JoystickMoveEnd -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_On_JoystickTouchStart(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EasyJoystick.On_JoystickTouchStart' can only appear on the left hand side of += or -= when used outside of the type 'EasyJoystick'");
			}

			if (arg0.op == EventOp.Add)
			{
				EasyJoystick.JoystickTouchStartHandler ev = (EasyJoystick.JoystickTouchStartHandler)arg0.func;
				EasyJoystick.On_JoystickTouchStart += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				EasyJoystick.JoystickTouchStartHandler ev = (EasyJoystick.JoystickTouchStartHandler)arg0.func;
				EasyJoystick.On_JoystickTouchStart -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_On_JoystickTap(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EasyJoystick.On_JoystickTap' can only appear on the left hand side of += or -= when used outside of the type 'EasyJoystick'");
			}

			if (arg0.op == EventOp.Add)
			{
				EasyJoystick.JoystickTapHandler ev = (EasyJoystick.JoystickTapHandler)arg0.func;
				EasyJoystick.On_JoystickTap += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				EasyJoystick.JoystickTapHandler ev = (EasyJoystick.JoystickTapHandler)arg0.func;
				EasyJoystick.On_JoystickTap -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_On_JoystickDoubleTap(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EasyJoystick.On_JoystickDoubleTap' can only appear on the left hand side of += or -= when used outside of the type 'EasyJoystick'");
			}

			if (arg0.op == EventOp.Add)
			{
				EasyJoystick.JoystickDoubleTapHandler ev = (EasyJoystick.JoystickDoubleTapHandler)arg0.func;
				EasyJoystick.On_JoystickDoubleTap += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				EasyJoystick.JoystickDoubleTapHandler ev = (EasyJoystick.JoystickDoubleTapHandler)arg0.func;
				EasyJoystick.On_JoystickDoubleTap -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_On_JoystickTouchUp(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'EasyJoystick.On_JoystickTouchUp' can only appear on the left hand side of += or -= when used outside of the type 'EasyJoystick'");
			}

			if (arg0.op == EventOp.Add)
			{
				EasyJoystick.JoystickTouchUpHandler ev = (EasyJoystick.JoystickTouchUpHandler)arg0.func;
				EasyJoystick.On_JoystickTouchUp += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				EasyJoystick.JoystickTouchUpHandler ev = (EasyJoystick.JoystickTouchUpHandler)arg0.func;
				EasyJoystick.On_JoystickTouchUp -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EasyJoystick_JoystickTouchUpHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<EasyJoystick.JoystickTouchUpHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<EasyJoystick.JoystickTouchUpHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EasyJoystick_JoystickDoubleTapHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<EasyJoystick.JoystickDoubleTapHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<EasyJoystick.JoystickDoubleTapHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EasyJoystick_JoystickTapHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<EasyJoystick.JoystickTapHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<EasyJoystick.JoystickTapHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EasyJoystick_JoystickTouchStartHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<EasyJoystick.JoystickTouchStartHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<EasyJoystick.JoystickTouchStartHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EasyJoystick_JoystickMoveEndHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<EasyJoystick.JoystickMoveEndHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<EasyJoystick.JoystickMoveEndHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EasyJoystick_JoystickMoveHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<EasyJoystick.JoystickMoveHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<EasyJoystick.JoystickMoveHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EasyJoystick_JoystickMoveStartHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<EasyJoystick.JoystickMoveStartHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<EasyJoystick.JoystickMoveStartHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

