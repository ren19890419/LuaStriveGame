//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class KBEngine_KBELuaUtilWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("KBELuaUtil");
		L.RegFunction("Utf8ToByte", Utf8ToByte);
		L.RegFunction("ByteToUtf8", ByteToUtf8);
		L.RegFunction("ArrayCopy", ArrayCopy);
		L.RegFunction("Log", Log);
		L.RegFunction("LogWarning", LogWarning);
		L.RegFunction("LogError", LogError);
		L.RegFunction("SetCallLuaFunction", SetCallLuaFunction);
		L.RegFunction("ClearCallLuaFunction", ClearCallLuaFunction);
		L.RegFunction("CallMethod", CallMethod);
		L.RegFunction("createFile", createFile);
		L.RegFunction("loadFile", loadFile);
		L.RegFunction("deleteFile", deleteFile);
		L.RegFunction("bytesToString", bytesToString);
		L.RegFunction("stringToBytes", stringToBytes);
		L.RegFunction("CallLuaFunction", KBEngine_KBELuaUtil_CallLuaFunction);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Utf8ToByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			object arg0 = ToLua.ToVarObject(L, 1);
			byte[] o = KBEngine.KBELuaUtil.Utf8ToByte(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ByteToUtf8(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			string o = KBEngine.KBELuaUtil.ByteToUtf8(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ArrayCopy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			long arg1 = LuaDLL.tolua_checkint64(L, 2);
			byte[] arg2 = ToLua.CheckByteBuffer(L, 3);
			long arg3 = LuaDLL.tolua_checkint64(L, 4);
			long arg4 = LuaDLL.tolua_checkint64(L, 5);
			KBEngine.KBELuaUtil.ArrayCopy(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Log(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			KBEngine.KBELuaUtil.Log(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogWarning(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			KBEngine.KBELuaUtil.LogWarning(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogError(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			KBEngine.KBELuaUtil.LogError(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCallLuaFunction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.KBELuaUtil.CallLuaFunction arg0 = (KBEngine.KBELuaUtil.CallLuaFunction)ToLua.CheckDelegate<KBEngine.KBELuaUtil.CallLuaFunction>(L, 1);
			KBEngine.KBELuaUtil.SetCallLuaFunction(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearCallLuaFunction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			KBEngine.KBELuaUtil.ClearCallLuaFunction();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallMethod(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (TypeChecker.CheckTypes<string, string>(L, 1) && TypeChecker.CheckParamsType<object>(L, 3, count - 2))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				object[] arg2 = ToLua.ToParamsObject(L, 3, count - 2);
				object[] o = KBEngine.KBELuaUtil.CallMethod(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<string>(L, 1) && TypeChecker.CheckParamsType<object>(L, 2, count - 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				object[] arg1 = ToLua.ToParamsObject(L, 2, count - 1);
				object[] o = KBEngine.KBELuaUtil.CallMethod(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: KBEngine.KBELuaUtil.CallMethod");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int createFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			byte[] arg2 = ToLua.CheckByteBuffer(L, 3);
			KBEngine.KBELuaUtil.createFile(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int loadFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			byte[] o = KBEngine.KBELuaUtil.loadFile(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int deleteFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			KBEngine.KBELuaUtil.deleteFile(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int bytesToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			string o = KBEngine.KBELuaUtil.bytesToString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int stringToBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			byte[] o = KBEngine.KBELuaUtil.stringToBytes(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KBEngine_KBELuaUtil_CallLuaFunction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<KBEngine.KBELuaUtil.CallLuaFunction>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<KBEngine.KBELuaUtil.CallLuaFunction>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

