//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class KBEngine_MemoryStreamWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(KBEngine.MemoryStream), typeof(System.Object));
		L.RegFunction("data", data);
		L.RegFunction("setData", setData);
		L.RegFunction("copy", copy);
		L.RegFunction("readInt8", readInt8);
		L.RegFunction("readInt16", readInt16);
		L.RegFunction("readInt32", readInt32);
		L.RegFunction("readInt64", readInt64);
		L.RegFunction("readUint8", readUint8);
		L.RegFunction("readUint16", readUint16);
		L.RegFunction("readUint32", readUint32);
		L.RegFunction("readUint64", readUint64);
		L.RegFunction("readFloat", readFloat);
		L.RegFunction("readDouble", readDouble);
		L.RegFunction("readString", readString);
		L.RegFunction("readBlob", readBlob);
		L.RegFunction("readPackXZ", readPackXZ);
		L.RegFunction("readPackY", readPackY);
		L.RegFunction("writeInt8", writeInt8);
		L.RegFunction("writeInt16", writeInt16);
		L.RegFunction("writeInt32", writeInt32);
		L.RegFunction("writeInt64", writeInt64);
		L.RegFunction("writeUint8", writeUint8);
		L.RegFunction("writeUint16", writeUint16);
		L.RegFunction("writeUint32", writeUint32);
		L.RegFunction("writeUint64", writeUint64);
		L.RegFunction("writeFloat", writeFloat);
		L.RegFunction("writeDouble", writeDouble);
		L.RegFunction("writeBlob", writeBlob);
		L.RegFunction("writeString", writeString);
		L.RegFunction("append", append);
		L.RegFunction("readSkip", readSkip);
		L.RegFunction("space", space);
		L.RegFunction("length", length);
		L.RegFunction("readEOF", readEOF);
		L.RegFunction("done", done);
		L.RegFunction("clear", clear);
		L.RegFunction("getbuffer", getbuffer);
		L.RegFunction("toString", toString);
		L.RegFunction("New", _CreateKBEngine_MemoryStream);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegConstant("BUFFER_MAX", 5840);
		L.RegVar("rpos", get_rpos, set_rpos);
		L.RegVar("wpos", get_wpos, set_wpos);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateKBEngine_MemoryStream(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				KBEngine.MemoryStream obj = new KBEngine.MemoryStream();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: KBEngine.MemoryStream.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int data(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			byte[] o = obj.data();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.setData(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int copy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			KBEngine.MemoryStream arg0 = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 2);
			obj.copy(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readInt8(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			sbyte o = obj.readInt8();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readInt16(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			short o = obj.readInt16();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			int o = obj.readInt32();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			long o = obj.readInt64();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readUint8(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			byte o = obj.readUint8();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readUint16(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			ushort o = obj.readUint16();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readUint32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			uint o = obj.readUint32();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readUint64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			ulong o = obj.readUint64();
			LuaDLL.tolua_pushuint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			float o = obj.readFloat();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			double o = obj.readDouble();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			string o = obj.readString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readBlob(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			byte[] o = obj.readBlob();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readPackXZ(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			UnityEngine.Vector2 o = obj.readPackXZ();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readPackY(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			float o = obj.readPackY();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeInt8(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			sbyte arg0 = (sbyte)LuaDLL.luaL_checknumber(L, 2);
			obj.writeInt8(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeInt16(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			short arg0 = (short)LuaDLL.luaL_checknumber(L, 2);
			obj.writeInt16(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.writeInt32(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.writeInt64(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeUint8(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			obj.writeUint8(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeUint16(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
			obj.writeUint16(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeUint32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.writeUint32(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeUint64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			obj.writeUint64(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.writeFloat(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			double arg0 = (double)LuaDLL.luaL_checknumber(L, 2);
			obj.writeDouble(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeBlob(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.writeBlob(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.writeString(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int append(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
			uint arg2 = (uint)LuaDLL.luaL_checknumber(L, 4);
			obj.append(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readSkip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.readSkip(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int space(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			uint o = obj.space();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int length(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			uint o = obj.length();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readEOF(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			bool o = obj.readEOF();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int done(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			obj.done();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			obj.clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getbuffer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			byte[] o = obj.getbuffer();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int toString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)ToLua.CheckObject<KBEngine.MemoryStream>(L, 1);
			string o = obj.toString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rpos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)o;
			int ret = obj.rpos;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rpos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_wpos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)o;
			int ret = obj.wpos;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index wpos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rpos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.rpos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rpos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_wpos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			KBEngine.MemoryStream obj = (KBEngine.MemoryStream)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.wpos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index wpos on a nil value");
		}
	}
}

